Given mkd;
a <http://b> c

Execute (gx autolink):
  let b:url = 'http://b'
  let b:line = getline(1)
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, 'a') + 1), ''
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, '<') + 1), b:url
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, 'h') + 1), b:url
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, '>') + 1), b:url
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, 'c') + 1), ''

Given mkd;
a http://b.bb c

Execute (gx implicit autolink):
  let b:url = 'http://b.bb'
  let b:line = getline(1)
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, 'a') + 1), ''
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, 'h') + 1), b:url
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, 'c') + 1), ''

Given mkd;
[a]: http://b "c"

Execute (gx link reference definition):
  let b:url = 'http://b'
  let b:line = getline(1)
  " TODO would be cool if all of the following gave the link.
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, 'a') + 1), ''
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, 'h') + 1), b:url
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, 'c') + 1), ''

Given mkd;
a [b](c) d

Execute (gx autolink):
  let b:url = 'c'
  let b:line = getline(1)
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, 'a') + 1), ''
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, '[') + 1), b:url
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, 'b') + 1), b:url
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, ']') + 1), b:url
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, '(') + 1), b:url
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, 'c') + 1), b:url
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, ')') + 1), b:url
  AssertEqual b:Markdown_GetUrlForPosition(1, match(b:line, 'd') + 1), ''

Given mkd;
# a

b

# c

d

Execute (]] same level):
  AssertEqual line('.'), 1
  normal ]]
  AssertEqual line('.'), 5
  normal [[
  AssertEqual line('.'), 1

Given mkd;
# a

b

## c

d

Execute (]] different levels level):
  AssertEqual line('.'), 1
  normal ]]
  AssertEqual line('.'), 5
  normal [[
  AssertEqual line('.'), 1

Given mkd;
# a

b

## c

d

# e

f

Execute (][ different levels level):
  AssertEqual line('.'), 1
  normal ][
  AssertEqual line('.'), 9
  normal []
  AssertEqual line('.'), 1

Given mkd;
# a

b

Execute (]c):
  normal! 3G
  AssertEqual line('.'), 3
  normal ]c
  AssertEqual line('.'), 1

Given mkd;
# a

Execute (Toc does not set nomodifiable on other files):
  " Sanity check.
  Assert &modifiable

  :Toc
  :lclose
  :edit a

  Assert &modifiable
